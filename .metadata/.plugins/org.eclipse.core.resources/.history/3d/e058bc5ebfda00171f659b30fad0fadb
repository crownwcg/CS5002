/*
 * tree_set.h
 *
 * This file provides the implementations of a HashBag, which is
 * a Set that is backed by a HashMap.
 *
 * @since 2017-03-15
 * @author philip gust
 */

#include <stdlib.h>
#include <stdbool.h>
#include <strings.h>

#include "hash_bag.h"

#include "hash_bag_iterator.h"
#include "hash_map.h"

/**
 * Create new empty HashBag.
 *
 * @return a new HashBag
 */
HashBag* createHashBag(void) {
	HashBag *bag = (HashBag *) malloc(sizeof(HashBag));
	bag->map     = createHashMap();
	return bag;
}

/**
 * Frees a HashBag.
 *
 * @param set the HashBag to free
 */
void deleteHashBag(HashBag* set) {
	clearHashBag(set);
	deleteHashMap(set->map);
	free(set);
}

/**
 * Removes all of the keys from this set.
 *
 * @param set the HashBag
 */
void clearHashBag(HashBag* set) {
	clearHashMap(set->map);
}

/**
 * Adds the specified key to this set if it is not already present.
 *
 * @param set the HashBag
 * @param key the entry key to check
 * @return true if the key was added, false otherwise
 */
bool addHashBagKey(HashBag* set, MapKey key) {
	if (putHashMapEntry(set->map, key, 1) != ) {
		putHashMapEntry(set->map, key, getHashMapValue(set->map, key)->count + 1);
	}
	return true;
}

/**
 * Adds all keys to this set that are present in the other set.
 *
 * @param set the HashBag
 * @param otherSet the other HashBag
 * @return true if the set was modified as a result of this call
 */
bool addAllHashBagKeys(HashBag* set, HashBag* otherSet) {
	return putAllHashMapEntries(set->map, otherSet->map);
}

/**
 * Returns true if this set contains the specified key.
 *
 * @param set the HashBag
 * @param key the entry key to check
 * @return true if the set contains the key, false otherwise
 */
bool containsHashBagKey(HashBag* set, MapKey key) {
	return containsHashMapKey(set->map, key);
}

/**
 * Returns true if this set contains all the keys from the other set.
 *
 * @param set the HashBag
 * @param key the entry key to check
 * @return true if the set contains all the keys, false otherwise
 */
bool containsAllHashBagKeys(HashBag* set, HashBag* otherSet) {
	size_t otherSetSize   = getHashMapSize(otherSet->map);
	MapKey **otherSetKeys = getHashMapKeys(otherSet->map);
	for (int i = 0; i < otherSetSize; i++)
		if (!containsHashBagKey(set, *otherSetKeys[i]))
			return false;
	return true;
}

/**
 * Returns the size of the set.
 *
 * @param set the HashBag
 * @return the size of the HashBag
 */
size_t getHashBagSize(HashBag* set) {
	return getHashMapSize(set->map);
}

/**
 * Returns true if this set contains no keys.
 *
 * @param set the HashBag
 * @return true of the set is entry, false otherwise
 */
bool isHashBagEmpty(HashBag* set) {
	return isHashMapEmpty(set->map);
}

/**
 * Removes the specified element from this set if it is present.
 *
 * @param set the HashBag
 * @param key the entry key to check
 * @return true if the key was removed, false otherwise
 */
bool deleteHashBagKey(HashBag* set, MapKey key) {
	return deleteHashMapEntryForKey(set->map, key) != NULL;
}

/**
 * Removes all elements from this set that are present in the other set.
 *
 * @param set the HashBag
 * @param key the entry key to check
 * @return true if the set changed as a result of this call
 */
bool deleteAllHashBagKeys(HashBag* set, HashBag* otherSet) {
	size_t setSize        = getHashMapSize(set->map);
	size_t otherSetSize   = getHashMapSize(otherSet->map);
	MapKey **otherSetKeys = getHashMapKeys(otherSet->map);
	for (int i = 0; i < otherSetSize; i++)
		if (containsHashMapKey(set->map, *otherSetKeys[i]))
			deleteHashBagKey(set, *otherSetKeys[i]);
	return getHashMapSize(set->map) != setSize;
}

/**
 * Retains only the elements in this set that are present in the other set.
 *
 * @param set the HashBag
 * @param key the entry key to check
 * @return true if the set changed as a result of this call
 */
bool retainAllHashBagKeys(HashBag* set, HashBag* otherSet) {
	size_t setSize   = getHashMapSize(set->map);
	MapKey **setKeys = getHashMapKeys(set->map);
	for (int i = 0; i < setSize; i++)
		if (!containsHashBagKey(otherSet, *setKeys[i]))
			deleteHashBagKey(set, *setKeys[i]);
	return getHashMapSize(set->map) != setSize;
}
