/*
 * Hash_map.h
 *
 * This file provides the structures and function declarations of a HashBag,
 * which is a set that is backed by a HashMap
 *
 * @since 2017-03-15
 * @author philip gust
 */

#ifndef HASH_BAG_H_
#define HASH_BAG_H_

#include <stdlib.h>
#include <stdbool.h>
#include "hash_map.h"

/**
 * Structure that defines a HashBag. All entries are private
 */
typedef struct {
	HashMap* map;
} HashBag;

/**
 * Create new empty HashBag.
 */
HashBag* createHashBag(void);

/**
 * Frees a HashBag.
 *
 * @param set the HashBag to free
 */
void deleteHashBag(HashBag* set);

/**
 * Removes all of the keys from this set.
 *
 * @param set the HashBag
 */
void clearHashBag(HashBag* set);

/**
 * Adds the specified key to this set if it is not already present.
 *
 * @param set the HashBag
 * @param key the entry key to check
 * @return true if the key was added, false otherwise
 */
bool addHashBagKey(HashBag* set, MapKey key);

/**
 * Adds all keys to this set that are present in the other set.
 *
 * @param set the HashBag
 * @param otherSet the other HashBag
 * @return true if the set was modified as a result of this call
 */
bool addAllHashBagKeys(HashBag* set, HashBag* otherSet);

/**
 * Returns true if this set contains the specified key.
 *
 * @param set the HashBag
 * @param key the entry key to check
 * @return true if the set contains the key, false otherwise
 */
bool containsHashBagKey(HashBag* set, MapKey key);

/**
 * Returns true if this set contains all the keys from the other set.
 *
 * @param set the HashBag
 * @param key the entry key to check
 * @return true if the set contains all the keys, false otherwise
 */
bool containsAllHashBagKeys(HashBag* set, HashBag* otherSet);

/**
 * Returns true if this set contains no keys.
 *
 * @param set the HashBag
 * @return true of the set is entry, false otherwise
 */
bool isHashBagEmpty(HashBag* set);

/**
 * Returns the size of the set.
 *
 * @param set the HashBag
 * @return the size of the HashBag
 */
size_t getHashBagSize(HashBag* set);

/**
 * Removes the specified element from this set if it is present.
 *
 * @param set the HashBag
 * @param key the entry key to check
 * @return true if the key was removed, false otherwise
 */
bool deleteHashBagKey(HashBag* set, MapKey key);

/**
 * Removes all elements from this set that are present in the other set.
 *
 * @param set the HashBag
 * @param key the entry key to check
 * @return true if the set changed as a result of this call
 */
bool deleteAllHashBagKeys(HashBag* set, HashBag* otherSet);

/**
 * Retains only the elements in this set that are present in the other set.
 *
 * @param set the HashBag
 * @param key the entry key to check
 * @return true if the set changed as a result of this call
 */
bool retainAllHashBagKeys(HashBag* set, HashBag* otherSet);

#endif /* HASH_BAG_H_ */
